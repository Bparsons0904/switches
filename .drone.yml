kind: pipeline
type: docker
name: switches-pipeline
steps:
  # Build Stage
  - name: build-staging
    image: docker:latest
    privileged: true
    volumes:
      - name: docker_cache
        path: /var/lib/docker
    commands:
      - docker pull switches_stage:latest || true
      - docker build --cache-from switches_stage:latest -t switches_stage:latest .
    when:
      branch:
        - main
      event:
        - push
  # Migrate Stage
  - name: migrate-staging
    image: golang:latest
    environment:
      TIER:
        from_secret: TIER_STAGE
      DB_HOST:
        from_secret: DB_HOST
      DB_USER:
        from_secret: DB_USER
      DB_PASSWORD:
        from_secret: DB_PASSWORD_STAGE
      DB_NAME:
        from_secret: DB_NAME
      DB_PORT:
        from_secret: DB_PORT_STAGE
    commands:
      - go run ./migrator/migrator.go -up
    when:
      branch:
        - main
      event:
        - push
    depends_on:
      - build-staging
  # Deploy Stage
  - name: deploy-staging
    image: docker:latest
    privileged: true
    environment:
      DOCKER_IMAGE: switches_stage
      IMAGE_TAG: latest
      BUILD_ENV: staging
      ENVIRONMENT: staging
      SERVER_PORT: 3030
      EXTERNAL_PORT: 3070
      TIER:
        from_secret: TIER_STAGE
      BASE_URL:
        from_secret: BASE_URL_STAGE
      DB_HOST:
        from_secret: DB_HOST
      DB_USER:
        from_secret: DB_USER
      DB_PASSWORD:
        from_secret: DB_PASSWORD_STAGE
      DB_NAME:
        from_secret: DB_NAME
      DB_PORT:
        from_secret: DB_PORT_STAGE
      AUTH_CLIENT_ID:
        from_secret: AUTH_CLIENT_ID_STAGE
      AUTH_URL:
        from_secret: AUTH_URL
      KEYDB_HOST:
        from_secret: KEYDB_HOST
      KEYDB_PASSWORD:
        from_secret: KEYDB_PASSWORD
      KEYDB_DB:
        from_secret: KEYDB_DB_STAGE
    commands:
      - docker-compose up -d --build
      - docker-compose ps
      - docker image prune -f
    when:
      branch:
        - main
      event:
        - push
    depends_on:
      - migrate-staging
trigger:
  branch:
    - main
  event:
    - push
---
kind: pipeline
type: docker
name: production-pipeline
# Build Production
steps:
  - name: build-production
    image: docker:latest
    privileged: true
    volumes:
      - name: docker_cache
        path: /var/lib/docker
    commands:
      - docker pull switches:latest || echo "No previous image to use for cache"
      - docker build --cache-from switches:latest -t switches:${DRONE_COMMIT_SHA} .
    when:
      event:
        - tag
      ref:
        - refs/tags/v*
  # Migrate Production
  - name: migrate-production
    image: golang:latest
    environment:
      TIER:
        from_secret: TIER_PROD
      DB_HOST:
        from_secret: DB_HOST
      DB_USER:
        from_secret: DB_USER
      DB_PASSWORD:
        from_secret: DB_PASSWORD_PROD
      DB_NAME:
        from_secret: DB_NAME
      DB_PORT:
        from_secret: DB_PORT_PROD
    commands:
      - go run ./migrator/migrator.go -up
    when:
      event:
        - tag
      ref:
        - refs/tags/v*
    depends_on:
      - build-production
  # Deploy Production
  - name: deploy-production
    image: docker:latest
    privileged: true
    environment:
      DOCKER_IMAGE: switches
      IMAGE_TAG: ${DRONE_COMMIT_SHA}
      BUILD_ENV: production
      ENVIRONMENT: production
      SERVER_PORT: 3030
      EXTERNAL_PORT: 3030
      TIER:
        from_secret: TIER_PROD
      BASE_URL:
        from_secret: BASE_URL_PROD
      DB_HOST:
        from_secret: DB_HOST
      DB_USER:
        from_secret: DB_USER
      DB_PASSWORD:
        from_secret: DB_PASSWORD_PROD
      DB_NAME:
        from_secret: DB_NAME
      DB_PORT:
        from_secret: DB_PORT_PROD
    commands:
      - docker-compose up -d --build
      - docker-compose ps
      - docker image prune -f
    when:
      event:
        - tag
      ref:
        - refs/tags/v*
    depends_on:
      - migrate-production
trigger:
  event:
    - push
    - tag
volumes:
  - name: docker_cache
    host:
      path: /tmp/docker-cache
