
package pages

import (
	"fmt"
	"reflect"
	"switches/models"
	"switches/templates/components"
	"switches/templates/icons"
)

templ SwitchDetail(user models.User, clickyClack models.Switch) {
	<main id="switch-detail">
		if user.IsAdmin {
			<div
				style="position: absolute; top: 0; right: 0; padding: 1rem; cursor: pointer;"
				hx-get={ fmt.Sprintf("/admin/switches/%s/edit", clickyClack.ID) }
				hx-target="#main"
				hx-swap="innerHTML"
				hx-push-url="true"
			>
				@icons.IconButton("admin-edit", "") {
					@icons.Edit()
				}
			</div>
		}
		<section id="details-area">
			<div id="images-container">
				<div id="switch-image">
					@components.GetSwitchImageLink(clickyClack)
				</div>
				<div class="thumbnails">
					for _, imageLink := range clickyClack.ImageLinks {
						<div
							hx-get={ fmt.Sprintf("/images/%s", imageLink.ID) }
							hx-target="#switch-image"
							hx-swap="innerHTML"
						>
							@components.Thumbnail(imageLink)
						</div>
					}
				</div>
			</div>
			<div id="info-container">
				<div id="switch-info">
					<h1>{ clickyClack.Name }</h1>
					<div class="attributes">
						{ clickyClack.SwitchType.Name }
						<span class="divider">|</span>
						{ clickyClack.Brand.Name }
						<span class="divider">|</span>
						<span class="price-point">
							for i := 0; i < clickyClack.PricePoint; i++ {
								@icons.Dollar()
							}
						</span>
					</div>
				</div>
				<div class="switch-selectors">
					@components.LikedSelector(user, clickyClack)
					@components.OwnedSelector(user, clickyClack)
					<span class="share-wrapper">
						<a
							class="share-button"
							hx-on:click="shareSwitchDetail(event)"
							data-switch-name={ clickyClack.Name }
							data-switch-id={ clickyClack.ID.String() }
						>
							@icons.Share()
						</a>
					</span>
				</div>
				<div class="rating-container">
					@components.Ratings(clickyClack, true)
				</div>
				<div id="description" class="info">
					<h2>Description</h2>
					<p>{ clickyClack.ShortDescription }</p>
					<p>{ clickyClack.LongDescription }</p>
				</div>
			</div>
		</section>
		<section>
			<div id="technical" class="info">
				<h2>Technical Specifications</h2>
			</div>
			<div id="tech-details">
				<div class="group">
					@techDetailGroup("Feel", icons.Touch()) {
						@details(Details{
							Name:   "Spring Force",
							Value:  clickyClack.Details.SpringForce,
							Suffix: "g",
						})
						@details(Details{
							Name: "Tactility Type",
							Type: clickyClack.Details.TactilityType,
						})
						@details(Details{
							Name:  "Bump Position",
							Value: clickyClack.Details.BumpPosition,
						})
						@details(Details{
							Name:   "Bump Force",
							Value:  clickyClack.Details.BumpForce,
							Suffix: "g",
						})
						@details(Details{
							Name: "Tactility Feedback",
							Type: clickyClack.Details.TactilityFeedback,
						})
						@details(Details{
							Name:  "Factory Lubed",
							Value: clickyClack.Details.FactoryLubed,
						})
						@details(Details{
							Name:   "Pre-Travel",
							Value:  clickyClack.Details.PreTravel,
							Suffix: "mm",
						})
						@details(Details{
							Name:   "Total Travel",
							Value:  clickyClack.Details.TotalTravel,
							Suffix: "mm",
						})
						@details(Details{
							Name:   "Initial Force",
							Value:  clickyClack.Details.InitialForce,
							Suffix: "g",
						})
						@details(Details{
							Name:   "Actuation Point",
							Value:  clickyClack.Details.ActuationPoint,
							Suffix: "mm",
						})
						@details(Details{
							Name:   "Actuation Force",
							Value:  clickyClack.Details.ActuationForce,
							Suffix: "g",
						})
						@details(Details{
							Name:   "Reset Point",
							Value:  clickyClack.Details.ResetPoint,
							Suffix: "mm",
						})
						@details(Details{
							Name:   "Bottom Out Point",
							Value:  clickyClack.Details.BottomOutForcePoint,
							Suffix: "mm",
						})
						@details(Details{
							Name:   "Bottom Out Force",
							Value:  clickyClack.Details.BottomOutForce,
							Suffix: "g",
						})
					}
				</div>
				<div class="group">
					@techDetailGroup("General", icons.Info()) {
						@details(Details{
							Name: "Pin Configuration",
							Type: clickyClack.Details.PinConfiguration,
						})
						@details(Details{
							Name: "Spring Material Type",
							Type: clickyClack.Details.SpringMaterialType,
						})
					}
				</div>
				<div class="group">
					@techDetailGroup("Sound", icons.Hear()) {
						@details(Details{
							Name: "Sound Level",
							Type: clickyClack.Details.SoundLevel,
						})
						@details(Details{
							Name: "Sound Type",
							Type: clickyClack.Details.SoundType,
						})
						@details(Details{
							Name: "Top Material Housing",
							Type: clickyClack.Details.TopHousingMaterial,
						})
						@details(Details{
							Name: "Base Material Housing",
							Type: clickyClack.Details.BaseHousingMaterial,
						})
						@details(Details{
							Name: "Stem Material",
							Type: clickyClack.Details.StemMaterial,
						})
					}
				</div>
				<div class="group">
					@techDetailGroup("Appearance", icons.Eye()) {
						@details(Details{
							Name: "Top Housing Color",
							Type: clickyClack.Details.TopHousingColor,
						})
						@details(Details{
							Name: "Bottom Housing Color",
							Type: clickyClack.Details.BottomHousingColor,
						})
						@details(Details{
							Name: "Stem Color",
							Type: clickyClack.Details.StemColor,
						})
						@details(Details{
							Name:  "Has Shine Through",
							Value: clickyClack.Details.HasShineThrough,
						})
					}
				</div>
			</div>
			<div id="switch-reviews">
				@components.SwitchReviews(clickyClack)
			</div>
		</section>
		<section id="switch-recommendations"></section>
	</main>
}

templ techDetailGroup(title string, icon templ.Component) {
	<div class="tech-detail-group">
		<div class="header">
			<h1 class="title">{ title }</h1>
			@icon
		</div>
		{ children... }
	</div>
}

type Details struct {
	Name   string
	Value  any
	Suffix string
	Type   *models.Type
}

templ empty() {
}

func details(details Details) templ.Component {
	if details.Type != nil {
		return detailsSpan(DetailSpan{
			Name:   details.Name,
			Value:  details.Type.Name,
			Suffix: details.Suffix,
		})
	}

	if details.Value == nil {
		return empty()
	}

	value := reflect.ValueOf(details.Value)
	if value.Kind() != reflect.Ptr {
		return detailsSpan(DetailSpan{
			Name:   details.Name,
			Value:  details.Value,
			Suffix: details.Suffix,
		})
	}

	if value.IsNil() {
		return empty()
	}

	switch valueType := value.Elem().Kind(); valueType {
	case reflect.Int:
		return detailsSpan(DetailSpan{
			Name:   details.Name,
			Value:  value.Elem().Int(),
			Suffix: details.Suffix,
		})
	case reflect.Float32, reflect.Float64:
		return detailsSpan(DetailSpan{
			Name:   details.Name,
			Value:  fmt.Sprintf("%.1f", value.Elem().Float()),
			Suffix: details.Suffix,
		})
	case reflect.String:
		return detailsSpan(DetailSpan{
			Name:   details.Name,
			Value:  value.Elem().String(),
			Suffix: details.Suffix,
		})
	case reflect.Bool:
		return detailsSpan(DetailSpan{
			Name:   details.Name,
			Value:  getBooleanString(value.Elem().Bool()),
			Suffix: details.Suffix,
		})
	default:
		return empty()
	}
}

func getBooleanString(value bool) string {
	if value {
		return "Yes"
	}
	return "No"
}

type DetailSpan struct {
	Name   string
	Value  any
	Suffix string
}

templ detailsSpan(details DetailSpan) {
	<p class="detail-span">{ details.Name }: <span>{ fmt.Sprintf("%s%s", details.Value, details.Suffix) }</span></p>
}

func ptr[T any](value T) *T {
	return &value
}

templ SwitchDetailOld(user models.User, clickyClack models.Switch) {
	<main id="switch-detail">
		<div class="switch-images">
			@components.GetSwitchImageLink(clickyClack)
		</div>
		<div class="switch-header">
			<div class="switch-names">
				<h1>{  clickyClack.Name }</h1>
				<h3>
					{ clickyClack.Brand.Name }<span>|</span>{ clickyClack.SwitchType.Name }
					<span class="share-wrapper">
						<a
							class="share-button"
							hx-on:click="shareSwitch(event)"
							data-switch-name={ clickyClack.Name }
						>
							@icons.Share()
						</a>
					</span>
				</h3>
			</div>
			<div class="switch-selectors">
				@components.LikedSelector(user, clickyClack)
				@components.OwnedSelector(user, clickyClack)
			</div>
		</div>
		<p>{ clickyClack.ShortDescription }</p>
		<p>{ clickyClack.LongDescription }</p>
		<div class="ratings"></div>
	</main>
}
