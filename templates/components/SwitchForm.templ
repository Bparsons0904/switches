package components

import (
	"fmt"
	"strconv"
	"switches/models"
	"switches/templates/components/icons"
)

type SwitchData struct {
	SwitchTypes   []Option
	Brands        []Option
	Manufacturers []Option
}

type SwitchInput struct {
	FormData SwitchData
	Switch   models.Switch
}

templ SwitchGeneralForm(input SwitchInput) {
	@TextInput(Input{
		ID:          input.Switch.ID.String(),
		Value:       input.Switch.Name,
		Name:        "switch-name",
		Label:       "Switch Name",
		Placeholder: "Enter switch name",
		Required:    true})
	@TextInput(Input{
		ID:          input.Switch.ID.String(),
		Value:       input.Switch.ShortDescription,
		Name:        "short-desc",
		Label:       "Short Description",
		Placeholder: "Enter Short Description",
		Required:    true})
	@AreaInput(Input{
		ID:          input.Switch.ID.String(),
		Value:       input.Switch.LongDescription,
		Name:        "long-desc",
		Label:       "Long Description",
		Placeholder: "Enter Long Description",
		Required:    true})
	@SelectInput(Select{
		ID:          input.Switch.ID.String(),
		Name:        "switch-type-id",
		Label:       "Switch Type",
		Options:     input.FormData.SwitchTypes,
		Selected:    strconv.Itoa(input.Switch.SwitchTypeID),
		Placeholder: "Select switch type",
		Required:    true})
	@SelectInput(Select{
		ID:          input.Switch.ID.String(),
		Name:        "brand-id",
		Label:       "Brand",
		Options:     input.FormData.Brands,
		Selected:    pointerIntToString(input.Switch.BrandID),
		Placeholder: "Select switch brand"})
	@SelectInput(Select{
		ID:          input.Switch.ID.String(),
		Name:        "manufacturer-id",
		Label:       "Manufacturer",
		Options:     input.FormData.Manufacturers,
		Selected:    pointerIntToString(input.Switch.ManufacturerID),
		Placeholder: "Select switch manufacturer"})
	@DateInput(Input{
		ID:          input.Switch.ID.String(),
		Name:        "release-date",
		Label:       "Release Date",
		Placeholder: "Select release date"})
	@CheckBox(CheckInput{
		ID:      input.Switch.ID.String(),
		Name:    "available",
		Label:   "Available",
		Checked: input.Switch.Available})
	@NumberInput(Number{
		ID:          input.Switch.ID.String(),
		Name:        "price",
		Label:       "Price ($ $$ $$$)",
		Min:         "1",
		Max:         "3",
		Step:        "1",
		Placeholder: "Enter switch price",
		Value:       input.Switch.PricePoint,
		Required:    true})
	@TextInput(Input{
		ID:          input.Switch.ID.String(),
		Name:        "site-url",
		Label:       "Site URL",
		Placeholder: "Enter switch site URL",
		Value:       input.Switch.SiteURL,
		Required:    true})
	<div id="image-links-container">
		<div id="image-links-wrapper">
			if len(input.Switch.ImageLinks) == 0 {
				@ImageLinksForm([]*models.ImageLink{{
					LinkAddress: "",
					AltText:     "",
				}})
			} else {
				@ImageLinksForm(input.Switch.ImageLinks)
			}
		</div>
	</div>
}

templ ImageLinksForm(imageLinks []*models.ImageLink) {
	<input type="hidden" name="link-count" value={ strconv.Itoa(len(imageLinks)) }/>
	{ fmt.Sprintf("lenth %d", len(imageLinks)) }
	for i := 0; i < len(imageLinks); i++ {
		@ImageLinkForm(i, imageLinks[i])
		<div style="display:flex; flex-direction: row; justify-content: space-between">
			if len(imageLinks) == i + 1 {
				<div
					hx-get="/admin/images/create"
					hx-target="#image-links-wrapper"
					hx-params="*"
					hx-include="closest form"
				>
					@icons.IconButton(fmt.Sprintf("add-button-%d", i), "success") {
						@icons.Add()
					}
				</div>
			}
			if len(imageLinks) >= 2 {
				<div
					hx-delete={ "/admin/images/" + strconv.Itoa(i) }
					hx-target="#image-links-wrapper"
					style="margin-left: auto"
				>
					@icons.IconButton(fmt.Sprintf("delete-button-%d", i), "danger") {
						@icons.Delete()
						{ fmt.Sprintf("Image %d", i + 1) }
					}
				</div>
			}
		</div>
		<script type="text/javascript">
        function validateInputs(index) {
            const urlInput = document.querySelector(`input[name="link-address-${index}"]`);
            const altTextInput = document.querySelector(`input[name="link-alt-text-${index}"]`);
            const addButton = document.querySelector(`#add-button-${index}`);
            
            if (urlInput && altTextInput && addButton) {
                const isValid = urlInput.value.trim() !== "" && altTextInput.value.trim() !== "";
                addButton.disabled = !isValid;
                addButton.classList.toggle('disabled', !isValid);
            }
        }

        document.addEventListener('input', function(event) {
            if (event.target.name.startsWith('link-address-') || event.target.name.startsWith('link-alt-text-')) {
                const index = event.target.name.split('-').pop();
                validateInputs(index);
            }
        });

        document.querySelectorAll('[name^="link-address-"]').forEach(input => {
            const index = input.name.split('-').pop();
            validateInputs(index);
        });
    </script>
	}
}

templ ImageLinkForm(index int, imageLink *models.ImageLink) {
	<div class="linked-group">
		<h3 style="margin-bottom: .5rem">{ fmt.Sprintf("Image %d", index + 1) }</h3>
		@TextInput(Input{
			Name:        "link-address-" + strconv.Itoa(index),
			Label:       "Image URL",
			Placeholder: "Enter switch image link",
			Value:       imageLink.LinkAddress,
			Required:    true})
		@TextInput(Input{
			Name:        "link-alt-text-" + strconv.Itoa(index),
			Label:       "Image Alt Text",
			Value:       imageLink.AltText,
			Placeholder: "Enter switch image alt text",
			Required:    true})
	</div>
}

func pointerIntToString(p *int) string {
	if p == nil {
		return ""
	}
	return strconv.Itoa(*p)
}
