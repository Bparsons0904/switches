package components

import (
	"fmt"
	"switches/models"
	"switches/templates/components/icons"
)

templ Ratings(clickyClack models.Switch) {
	<div class="ratings-wrapper">
		if clickyClack.UserRating == nil {
			@GeneralRatings(clickyClack.AverageRating, clickyClack.ID.String())
		} else {
			@UserRatings(clickyClack.UserRating.Rating, clickyClack.ID.String())
		}
		<span class="rating-average">
			{ fmt.Sprintf("%.1f", clickyClack.AverageRating) }@icons.StarFilled()
		</span>
		<span class="rating-count">{ fmt.Sprintf("(%d reviews)", clickyClack.RatingsCount) }</span>
	</div>
}

templ UserRatings(rating int, id string) {
	for i := 0; i < 5; i++ {
		<div
			class="ratings"
			hx-put={ fmt.Sprintf("/switches/%s/ratings/%d", id, i) }
			hx-target="closest .ratings-wrapper"
			hx-on:click="event.stopPropagation()"
		>
			if rating >= i + 1 {
				<span class="user-ratings">
					@icons.StarFilled()
				</span>
			} else {
				@icons.StarOutlined()
			}
		</div>
	}
}

templ GeneralRatings(rating float64, id string) {
	for i := 0; i < 5; i++ {
		<div
			class="ratings"
			hx-put={ fmt.Sprintf("/switches/%s/ratings/%d", id, i) }
			hx-target="closest .ratings-wrapper"
			hx-swap="outerHTML"
			hx-on:click="event.stopPropagation()"
		>
			if rating >= float64(i+1) {
				@icons.StarFilled()
			} else if rating >= float64(i) + 0.5 {
				@icons.StarHalf()
			} else {
				@icons.StarOutlined()
			}
		</div>
	}
}
