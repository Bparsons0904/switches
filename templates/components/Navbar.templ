package components

import (
	"fmt"
	"github.com/google/uuid"
	"github.com/spf13/viper"
	"log"
	"net/url"
	"switches/models"
	"switches/services"
)

templ Navbar(route string, user models.User) {
	<header id="navbar">
		<a
			class="header-wrapper"
			hx-get="/"
			hx-target="#body"
			hx-push-url="/"
		>
			<div class="img-wrapper">
				<img src="/images/switches_logo_white.webp" alt="switclh as a logo"/>
			</div>
			<h1 class="text-light">Waugze</h1>
		</a>
		<div class="menu-items">
			if user.ID != uuid.Nil {
				<div class="logged-in">
					Hello, { user.Name }
					@LogoutButton()
				</div>
			} else {
				@LoginButton()
			}
		</div>
	</header>
}

templ LoginButton() {
	<a href={ templ.SafeURL(getLoginLink()) }><button type="button" class="menu-button">Login</button></a>
}

func getLoginLink() string {
	auth, err := services.GenerateAuthString()
	if err != nil {
		log.Println("Error generating auth string", err)
		return ""
	}

	authURL := fmt.Sprintf(
		"https://%s/oauth/v2/authorize?client_id=%s&redirect_uri=%s&response_type=code&scope=%s&state=%s&nonce=%s&code_challenge=%s&code_challenge_method=S256",
		auth.AuthURL,
		auth.ClientID,
		url.QueryEscape(auth.CallbackURL),
		url.QueryEscape("openid profile email offline_access"),
		auth.State,
		auth.Nonce,
		auth.CodeChallenge,
	)
	return authURL
}

templ LogoutButton() {
	<a href={ templ.SafeURL(getLogoutLink()) }><button class="btn-inverted" type="button">Logout</button></a>
}

func getLogoutLink() string {
	baseLogoutURL := fmt.Sprintf("https://%s/oidc/v1/end_session", viper.GetString("AUTH_URL"))

	params := url.Values{}
	params.Add("client_id", viper.GetString("AUTH_CLIENT_ID"))
	params.Add("post_logout_redirect_uri", fmt.Sprintf("%s/auth/logout", viper.GetString("BASE_URL")))

	logoutURL := fmt.Sprintf("%s?%s", baseLogoutURL, params.Encode())
	return logoutURL
}
