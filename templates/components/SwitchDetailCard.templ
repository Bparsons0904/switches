package components

import (
	"fmt"
	"switches/models"
	"switches/templates/components/icons"
	"switches/templates/layouts"
)

templ SwitchDetailCard(user models.User, clickyClack models.Switch) {
	@layouts.Modal() {
		<div class="switch-detail-card">
			<div class="switch-images">
				@getSwitchImageLink(clickyClack)
			</div>
			<div class="switch-header">
				<div class="switch-names">
					<h1
						class="switch-detail-title"
						hx-trigger="click"
						hx-get={ fmt.Sprintf("/switches/%s", clickyClack.ID) }
						hx-push-url={ fmt.Sprintf("/switches/%s", clickyClack.ID) }
						hx-on:click="closeDialog()"
						hx-target="#body"
					>{  clickyClack.Name }</h1>
					<h3>
						{ clickyClack.Brand.Name }<span>|</span>{ clickyClack.SwitchType.Name }
						<span class="share-wrapper">
							<a
								class="share-button"
								hx-on:click="shareSwitch(event)"
								data-switch-name={ clickyClack.Name }
							>
								@icons.Share()
							</a>
						</span>
					</h3>
				</div>
				<div class="switch-selectors">
					@LikedSelector(user, clickyClack)
					@OwnedSelector(user, clickyClack)
				</div>
			</div>
			<p>{ clickyClack.LongDescription }</p>
			<div class="ratings"></div>
		</div>
	}
}

templ OwnedSelector(user models.User, clickyClack models.Switch) {
	if isOwned(user, clickyClack) {
		<a
			class="checkmark filled"
			hx-delete={ fmt.Sprintf("/switches/%s/owned", clickyClack.ID) }
			hx-swap="outerHTML"
		>
			@icons.BookmarkCheckFilled()
		</a>
	} else {
		<a
			class="checkmark"
			hx-post={ fmt.Sprintf("/switches/%s/owned", clickyClack.ID) }
			hx-swap="outerHTML"
		>
			@icons.Checkmark()
		</a>
	}
}

func isOwned(user models.User, clickyClack models.Switch) bool {
	for _, ownedSwitch := range user.OwnedSwitches {
		if ownedSwitch.ID == clickyClack.ID {
			return true
		}
	}
	return false
}

templ LikedSelector(user models.User, clickyClack models.Switch) {
	if isLiked(user, clickyClack) {
		<a
			class="heart filled"
			hx-delete={ fmt.Sprintf("/switches/%s/liked", clickyClack.ID) }
			hx-swap="outerHTML"
		>
			@icons.HeartFilled()
		</a>
	} else {
		<a
			class="heart"
			hx-post={ fmt.Sprintf("/switches/%s/liked", clickyClack.ID) }
			hx-swap="outerHTML"
		>
			@icons.HeartOutlined()
		</a>
	}
}

func isLiked(user models.User, clickyClack models.Switch) bool {
	for _, likedSwitch := range user.LikedSwitches {
		if likedSwitch.ID == clickyClack.ID {
			return true
		}
	}
	return false
}

func getSwitchImageLink(clickyClack models.Switch) templ.Component {
	if len(clickyClack.ImageLinks) == 0 {
		return Image(ImageProps{
			Src:      "switch_placeholder.jpg",
			Alt:      "Placeholder image",
			IsSquare: true,
		})
	}

	if len(clickyClack.ImageLinks) == 1 {
		return ImageLink(ImageProps{
			Src:      clickyClack.ImageLinks[0].LinkAddress,
			Alt:      clickyClack.ImageLinks[0].AltText,
			IsSquare: true,
		})
	}

	var imageLinks []ImageProps
	for _, imageLink := range clickyClack.ImageLinks {
		imageLinks = append(imageLinks, ImageProps{
			Src:      imageLink.LinkAddress,
			Alt:      imageLink.AltText,
			IsSquare: true,
		})
	}

	return ImageLinks(imageLinks[:2])
}
